//=============================================================================
// 
//  リザルトマネージャ処理 [resultmanager.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "debugproc.h"
#include "resultmanager.h"
#include "calculation.h"

//==========================================================================
// マクロ定義
//==========================================================================

//==========================================================================
// 静的メンバ変数宣言
//==========================================================================

//==========================================================================
// コンストラクタ
//==========================================================================
CResultManager::CResultManager()
{
	// 値のクリア
	m_nBaseScore = 0;		// スコア
	m_nToatalScore = 0;	// 最終スコア

}

//==========================================================================
// デストラクタ
//==========================================================================
CResultManager::~CResultManager()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CResultManager *CResultManager::Create(void)
{
	// 生成用のオブジェクト
	CResultManager *pManager = NULL;

	if (pManager == NULL)
	{// NULLだったら

		// メモリの確保
		pManager = DEBUG_NEW CResultManager;

		if (pManager != NULL)
		{// メモリの確保が出来ていたら

			// 初期化処理
			HRESULT hr = pManager->Init();

			if (FAILED(hr))
			{// 失敗していたら
				return NULL;
			}
		}

		return pManager;
	}

	return NULL;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CResultManager::Init(void)
{
	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CResultManager::Uninit(void)
{

}

//==========================================================================
// リセット
//==========================================================================
void CResultManager::Reset(void)
{
	// 値のクリア
	m_nBaseScore = 0;		// スコア
	m_nToatalScore = 0;	// 最終スコア
}

//==========================================================================
// 更新処理
//==========================================================================
void CResultManager::Update(void)
{
	
}

//==========================================================================
// スコア加算
//==========================================================================
void CResultManager::AddScore(int nValue)
{
	m_nBaseScore += nValue;
	m_nToatalScore += nValue;
}

//==========================================================================
// スコアの取得処理
//==========================================================================
int CResultManager::GetBaseScore(void)
{
	return m_nBaseScore;
}

//==========================================================================
// スコアの取得処理
//==========================================================================
int CResultManager::GetToatalScore(void)
{
	return m_nToatalScore;
}
